{
  "address": "0xE27287AEC8824C5c523ba36D9fb194f157a5E5eb",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_masterQuoteAsset",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_adapters",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_adapter",
          "type": "address"
        }
      ],
      "name": "AdapterAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_adapter",
          "type": "address"
        }
      ],
      "name": "AdapterRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_newMasterQuote",
          "type": "address"
        }
      ],
      "name": "MasterQuoteAssetEdited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_assetOne",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_assetTwo",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "PriceAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_assetOne",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_assetTwo",
          "type": "address"
        }
      ],
      "name": "PriceRemoved",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "adapters",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_adapter",
          "type": "address"
        }
      ],
      "name": "addAdapter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newMasterQuoteAsset",
          "type": "address"
        }
      ],
      "name": "editMasterQuoteAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_assetOne",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_assetTwo",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "_decimals",
          "type": "uint8"
        }
      ],
      "name": "feedPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdapters",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_assetOne",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_assetTwo",
          "type": "address"
        }
      ],
      "name": "getPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "masterQuoteAsset",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "prices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_adapter",
          "type": "address"
        }
      ],
      "name": "removeAdapter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_assetOne",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_assetTwo",
          "type": "address"
        }
      ],
      "name": "removePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x343969504e587a3c353924cb8aed3e779cd363ac90b3fbaf38d1568321ea3c9e",
  "receipt": {
    "to": null,
    "from": "0x81C760CADdC28F52c992953187c339fC290650d9",
    "contractAddress": "0xE27287AEC8824C5c523ba36D9fb194f157a5E5eb",
    "transactionIndex": 6,
    "gasUsed": "2034406",
    "logsBloom": "0x
    "blockHash": "0x63d80906e042cc48967be647f85bed91ca5eeb582c6d85d2a236ab5b9117ed5b",
    "transactionHash": "0x343969504e587a3c353924cb8aed3e779cd363ac90b3fbaf38d1568321ea3c9e",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 12042944,
        "transactionHash": "0x343969504e587a3c353924cb8aed3e779cd363ac90b3fbaf38d1568321ea3c9e",
        "address": "0xE27287AEC8824C5c523ba36D9fb194f157a5E5eb",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000081c760caddc28f52c992953187c339fc290650d9"
        ],
        "data": "0x",
        "logIndex": 5,
        "blockHash": "0x63d80906e042cc48967be647f85bed91ca5eeb582c6d85d2a236ab5b9117ed5b"
      }
    ],
    "blockNumber": 12042944,
    "cumulativeGasUsed": "3134185",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xfe724a829fdf12f7012365db98730eee33742ea2",
    []
  ],
  "numDeployments": 2,
  "solcInputHash": "c886205168291072142b45e1d4674b33",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_masterQuoteAsset\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_adapters\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_adapter\",\"type\":\"address\"}],\"name\":\"AdapterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_adapter\",\"type\":\"address\"}],\"name\":\"AdapterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_newMasterQuote\",\"type\":\"address\"}],\"name\":\"MasterQuoteAssetEdited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_assetOne\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_assetTwo\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"PriceAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_assetOne\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_assetTwo\",\"type\":\"address\"}],\"name\":\"PriceRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"adapters\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adapter\",\"type\":\"address\"}],\"name\":\"addAdapter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newMasterQuoteAsset\",\"type\":\"address\"}],\"name\":\"editMasterQuoteAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_assetOne\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_assetTwo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"}],\"name\":\"feedPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdapters\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_assetOne\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_assetTwo\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"masterQuoteAsset\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"prices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_adapter\",\"type\":\"address\"}],\"name\":\"removeAdapter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_assetOne\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_assetTwo\",\"type\":\"address\"}],\"name\":\"removePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addAdapter(address)\":{\"params\":{\"_adapter\":\"Address of new adapter\"}},\"constructor\":{\"params\":{\"_adapters\":\"List of adapters used to price assets created by other protocols\",\"_masterQuoteAsset\":\"Address of asset that can be used to link unrelated asset pairs\"}},\"editMasterQuoteAsset(address)\":{\"params\":{\"_newMasterQuoteAsset\":\"New address of master quote asset\"}},\"feedPrice(address,address,uint256,uint8)\":{\"params\":{\"_assetOne\":\"Address of first asset in pair\",\"_assetTwo\":\"Address of second asset in pair\",\"_decimals\":\"Price decimals\",\"_price\":\"Price of assetOne per assetTwo\"}},\"getPrice(address,address)\":{\"params\":{\"_assetOne\":\"Address of first asset in pair\",\"_assetTwo\":\"Address of second asset in pair\"},\"returns\":{\"_0\":\"Price of asset pair to 18 decimals of precision\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeAdapter(address)\":{\"params\":{\"_adapter\":\"Address of adapter to remove\"}},\"removePrice(address,address)\":{\"params\":{\"_assetOne\":\"Address of first asset in pair\",\"_assetTwo\":\"Address of second asset in pair\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"PriceOracle Contract that returns the price for any given asset pair. Price is retrieved either directly from an oracle, calculated using common asset pairs, or uses external data to calculate price. Note: Prices are returned in preciseUnits (i.e. 18 decimals of precision)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addAdapter(address)\":{\"notice\":\"GOVERNANCE FUNCTION: Add new oracle adapter.\"},\"constructor\":{\"notice\":\"Initialize state variables\"},\"editMasterQuoteAsset(address)\":{\"notice\":\"GOVERNANCE FUNCTION: Change the master quote asset.\"},\"feedPrice(address,address,uint256,uint8)\":{\"notice\":\"GOVERNANCE FUNCTION: Add new asset pair price.\"},\"getAdapters()\":{\"notice\":\"Returns an array of adapters\"},\"getPrice(address,address)\":{\"notice\":\"SYSTEM-ONLY PRIVELEGE: Find price of passed asset pair, if possible. The steps it takes are:  1) Check to see if a direct or inverse price of the pair exists,  2) If not, use masterQuoteAsset to link pairs together (i.e. BTC/ETH and ETH/USDC     could be used to calculate BTC/USDC).  3) If not, check oracle adapters in case one or more of the assets needs external protocol data     to price.  4) If all steps fail, revert.\"},\"removeAdapter(address)\":{\"notice\":\"GOVERNANCE FUNCTION: Remove oracle adapter.\"},\"removePrice(address,address)\":{\"notice\":\"GOVERNANCE FUNCTION: Remove asset pair's price.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PriceOracle.sol\":\"PriceOracle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/PriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\npragma experimental \\\"ABIEncoderV2\\\";\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { AddressArrayUtils } from \\\"./lib/AddressArrayUtils.sol\\\";\\nimport { PreciseUnitMath } from \\\"./lib/PreciseUnitMath.sol\\\";\\nimport { IOracleAdapter } from \\\"./interfaces/IOracleAdapter.sol\\\";\\n\\n\\n/**\\n * @title PriceOracle\\n *\\n * Contract that returns the price for any given asset pair. Price is retrieved either directly from an oracle,\\n * calculated using common asset pairs, or uses external data to calculate price.\\n * Note: Prices are returned in preciseUnits (i.e. 18 decimals of precision)\\n */\\ncontract PriceOracle is Ownable {\\n\\n    using PreciseUnitMath for uint256;\\n    using AddressArrayUtils for address[];\\n\\n    /* ============ Events ============ */\\n\\n    event PriceAdded(address indexed _assetOne, address indexed _assetTwo, uint256 _price);\\n    event PriceRemoved(address indexed _assetOne, address indexed _assetTwo);\\n    event AdapterAdded(address _adapter);\\n    event AdapterRemoved(address _adapter);\\n    event MasterQuoteAssetEdited(address _newMasterQuote);\\n\\n\\n    /* ============ State Variables ============ */\\n\\n    // Mapping between assetA/assetB and its associated price\\n    // Asset 1 -> Asset 2 -> price\\n    mapping(address => mapping(address => uint256)) public prices;\\n\\n    // Token address of the bridge asset that prices are derived from if the specified pair price is missing\\n    address public masterQuoteAsset;\\n\\n    // List of IOracleAdapters used to return prices of third party protocols (e.g. Uniswap, Compound, Balancer)\\n    address[] public adapters;\\n\\n    /* ============ Constructor ============ */\\n\\n    /**\\n     * Initialize state variables\\n     *\\n     * @param _masterQuoteAsset       Address of asset that can be used to link unrelated asset pairs\\n     * @param _adapters               List of adapters used to price assets created by other protocols\\n     */\\n    constructor(address _masterQuoteAsset, address[] memory _adapters) {\\n        masterQuoteAsset = _masterQuoteAsset;\\n        adapters = _adapters;\\n    }\\n\\n    /* ============ External Functions ============ */\\n\\n    /**\\n     * SYSTEM-ONLY PRIVELEGE: Find price of passed asset pair, if possible. The steps it takes are:\\n     *  1) Check to see if a direct or inverse price of the pair exists,\\n     *  2) If not, use masterQuoteAsset to link pairs together (i.e. BTC/ETH and ETH/USDC\\n     *     could be used to calculate BTC/USDC).\\n     *  3) If not, check oracle adapters in case one or more of the assets needs external protocol data\\n     *     to price.\\n     *  4) If all steps fail, revert.\\n     *\\n     * @param _assetOne         Address of first asset in pair\\n     * @param _assetTwo         Address of second asset in pair\\n     * @return                  Price of asset pair to 18 decimals of precision\\n     */\\n    function getPrice(address _assetOne, address _assetTwo) external view returns (uint256) {\\n        (bool priceFound, uint256 price) = _getDirectOrInversePrice(_assetOne, _assetTwo);\\n\\n        if (!priceFound) {\\n            (priceFound, price) = _getPriceFromMasterQuote(_assetOne, _assetTwo);\\n        }\\n\\n        if (!priceFound) {\\n            (priceFound, price) = _getPriceFromAdapters(_assetOne, _assetTwo);\\n        }\\n\\n        require(priceFound, \\\"PriceOracle.getPrice: Price not found.\\\");\\n\\n        return price;\\n    }\\n\\n    /**\\n     * GOVERNANCE FUNCTION: Add new asset pair price.\\n     *\\n     * @param _assetOne         Address of first asset in pair\\n     * @param _assetTwo         Address of second asset in pair\\n     * @param _price            Price of assetOne per assetTwo\\n     * @param _decimals         Price decimals\\n     */\\n    function feedPrice(\\n        address _assetOne,\\n        address _assetTwo,\\n        uint256 _price,\\n        uint8 _decimals\\n    ) external onlyOwner {\\n        prices[_assetOne][_assetTwo] = PreciseUnitMath.preciseDiv(_price, 10 ** _decimals);\\n\\n        emit PriceAdded(_assetOne, _assetTwo, _price);\\n    }\\n\\n    /**\\n     * GOVERNANCE FUNCTION: Remove asset pair's price.\\n     *\\n     * @param _assetOne         Address of first asset in pair\\n     * @param _assetTwo         Address of second asset in pair\\n     */\\n    function removePrice(address _assetOne, address _assetTwo) external onlyOwner {\\n        require(\\n            prices[_assetOne][_assetTwo] > 0,\\n            \\\"PriceOracle.removePrice: Price doesn't exist.\\\"\\n        );\\n\\n        delete prices[_assetOne][_assetTwo];\\n\\n        emit PriceRemoved(_assetOne, _assetTwo);\\n    }\\n\\n    /**\\n     * GOVERNANCE FUNCTION: Add new oracle adapter.\\n     *\\n     * @param _adapter         Address of new adapter\\n     */\\n    function addAdapter(address _adapter) external onlyOwner {\\n        require(\\n            !adapters.contains(_adapter),\\n            \\\"PriceOracle.addAdapter: Adapter already exists.\\\"\\n        );\\n        adapters.push(_adapter);\\n\\n        emit AdapterAdded(_adapter);\\n    }\\n\\n    /**\\n     * GOVERNANCE FUNCTION: Remove oracle adapter.\\n     *\\n     * @param _adapter         Address of adapter to remove\\n     */\\n    function removeAdapter(address _adapter) external onlyOwner {\\n        require(\\n            adapters.contains(_adapter),\\n            \\\"PriceOracle.removeAdapter: Adapter does not exist.\\\"\\n        );\\n        adapters = adapters.remove(_adapter);\\n\\n        emit AdapterRemoved(_adapter);\\n    }\\n\\n    /**\\n     * GOVERNANCE FUNCTION: Change the master quote asset.\\n     *\\n     * @param _newMasterQuoteAsset         New address of master quote asset\\n     */\\n    function editMasterQuoteAsset(address _newMasterQuoteAsset) external onlyOwner {\\n        masterQuoteAsset = _newMasterQuoteAsset;\\n\\n        emit MasterQuoteAssetEdited(_newMasterQuoteAsset);\\n    }\\n\\n    /* ============ External View Functions ============ */\\n\\n    /**\\n     * Returns an array of adapters\\n     */\\n    function getAdapters() external view returns (address[] memory) {\\n        return adapters;\\n    }\\n\\n    /* ============ Internal Functions ============ */\\n\\n    /**\\n     * Check if direct or inverse price exists. If so return that price along with boolean indicating\\n     * it exists. Otherwise return boolean indicating price doesn't exist.\\n     *\\n     * @param _assetOne         Address of first asset in pair\\n     * @param _assetTwo         Address of second asset in pair\\n     * @return bool             Boolean indicating if price exists\\n     * @return uint256          Price of asset pair to 18 decimal precision (if exists, otherwise 0)\\n     */\\n    function _getDirectOrInversePrice(\\n        address _assetOne,\\n        address _assetTwo\\n    )\\n        internal\\n        view\\n        returns (bool, uint256)\\n    {\\n        uint256 price = prices[_assetOne][_assetTwo];\\n\\n        // Check direct price (asset1 -> asset 2). If exists, then return value\\n        // Has direct price\\n        if (price > 0) {\\n            return (true, price);\\n        }\\n\\n        uint256 inversePrice = prices[_assetTwo][_assetOne];\\n\\n        // If not, check inverse price (asset 2 -> asset 1). If exists, then return 1 / asset1 -> asset2\\n        if (inversePrice > 0) {\\n            // Calculate inverse price. The inverse price is 1 (or 1e18) / inverse price\\n            return (true, PreciseUnitMath.preciseUnit().preciseDiv(inversePrice));\\n        }\\n\\n        return (false, 0);\\n    }\\n\\n    /**\\n     * Try to calculate asset pair price by getting each asset in the pair's price relative to master\\n     * quote asset. Both prices must exist otherwise function returns false and no price.\\n     *\\n     * @param _assetOne         Address of first asset in pair\\n     * @param _assetTwo         Address of second asset in pair\\n     * @return bool             Boolean indicating if price exists\\n     * @return uint256          Price of asset pair to 18 decimal precision (if exists, otherwise 0)\\n     */\\n    function _getPriceFromMasterQuote(\\n        address _assetOne,\\n        address _assetTwo\\n    )\\n        internal\\n        view\\n        returns (bool, uint256)\\n    {\\n        (bool priceFoundOne, uint256 assetOnePrice) = _getDirectOrInversePrice(_assetOne, masterQuoteAsset);\\n        (bool priceFoundTwo, uint256 assetTwoPrice) = _getDirectOrInversePrice(_assetTwo, masterQuoteAsset);\\n\\n        if (priceFoundOne && priceFoundTwo) {\\n            return (true, assetOnePrice.preciseDiv(assetTwoPrice));\\n        }\\n\\n        return (false, 0);\\n    }\\n\\n    /**\\n     * Scan adapters to see if one or more of the assets needs external protocol data to be priced. If\\n     * does not exist return false and no price.\\n     *\\n     * @param _assetOne         Address of first asset in pair\\n     * @param _assetTwo         Address of second asset in pair\\n     * @return bool             Boolean indicating if price exists\\n     * @return uint256          Price of asset pair to 18 decimal precision (if exists, otherwise 0)\\n     */\\n    function _getPriceFromAdapters(\\n        address _assetOne,\\n        address _assetTwo\\n    )\\n        internal\\n        view\\n        returns (bool, uint256)\\n    {\\n        for (uint256 i = 0; i < adapters.length; i++) {\\n            (bool priceFound, uint256 price) = IOracleAdapter(adapters[i]).getPrice(_assetOne, _assetTwo);\\n\\n            if (priceFound) {\\n                return (priceFound, price);\\n            }\\n        }\\n\\n        return (false, 0);\\n    }\\n}\\n\",\"keccak256\":\"0xfe612b57bc08786c2655b06f180054edce1e98fd55d90446ae68b6e7d2fc861c\",\"license\":\"MIT\"},\"contracts/interfaces/IOracleAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\n\\n/**\\n * @title IOracleAdapter\\n * @author Set Protocol\\n *\\n * Interface for calling an oracle adapter.\\n */\\ninterface IOracleAdapter {\\n\\n    /**\\n     * Function for retrieving a price that requires sourcing data from outside protocols to calculate.\\n     *\\n     * @param  _assetOne    First asset in pair\\n     * @param  _assetTwo    Second asset in pair\\n     * @return                  Boolean indicating if oracle exists\\n     * @return              Current price of asset represented in uint256\\n     */\\n    function getPrice(address _assetOne, address _assetTwo) external view returns (bool, uint256);\\n}\\n\",\"keccak256\":\"0x2111b238bdc5e8234430854047f2d75b031355fe51624b30fada270a85af470b\",\"license\":\"MIT\"},\"contracts/lib/AddressArrayUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nlibrary AddressArrayUtils {\\n\\n    /**\\n     * @dev Finds the index of the first occurrence of the given element.\\n     * @param A The input array to search\\n     * @param a The value to find\\n     * @return Returns (index and isIn) for the first occurrence starting from index 0\\n     */\\n    function indexOf(address[] memory A, address a) internal pure returns (uint256, bool) {\\n        uint256 length = A.length;\\n        for (uint256 i = 0; i < length; i++) {\\n            if (A[i] == a) {\\n                return (i, true);\\n            }\\n        }\\n        return (uint256(0), false);\\n    }\\n\\n    /**\\n     * Returns true if the value is present in the list. Uses indexOf internally.\\n     * @param A The input array to search\\n     * @param a The value to find\\n     * @return Returns isIn for the first occurrence starting from index 0\\n     */\\n    function contains(address[] memory A, address a) internal pure returns (bool) {\\n        (, bool isIn) = indexOf(A, a);\\n        return isIn;\\n    }\\n\\n    /**\\n     * @param A The input array to search\\n     * @param a The address to remove\\n     * @return Returns the array with the object removed.\\n     */\\n    function remove(address[] memory A, address a)\\n        internal\\n        pure\\n        returns (address[] memory)\\n    {\\n        (uint256 index, bool isIn) = indexOf(A, a);\\n        require(isIn, \\\"Address not in array.\\\");\\n        (address[] memory _A,) = pop(A, index);\\n        return _A;\\n    }\\n\\n    /**\\n     * @dev Removes specified index from array\\n     * @param A The input array to search\\n     * @param index The index to remove\\n     * @return Returns the new array and the removed entry\\n     */\\n    function pop(address[] memory A, uint256 index)\\n        internal\\n        pure\\n        returns (address[] memory, address)\\n    {\\n        uint256 length = A.length;\\n        require(index < A.length, \\\"Index must be < A length\\\");\\n        address[] memory newAddresses = new address[](length - 1);\\n        for (uint256 i = 0; i < index; i++) {\\n            newAddresses[i] = A[i];\\n        }\\n        for (uint256 j = index + 1; j < length; j++) {\\n            newAddresses[j - 1] = A[j];\\n        }\\n        return (newAddresses, A[index]);\\n    }\\n}\\n\",\"keccak256\":\"0x155665b45366bae9c23d615d507caacad8bcaf9e571ff06065f042605895c8ac\",\"license\":\"MIT\"},\"contracts/lib/PreciseUnitMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\npragma experimental ABIEncoderV2;\\n\\nlibrary PreciseUnitMath {\\n\\n    // The number One in precise units.\\n    uint256 constant internal PRECISE_UNIT = 10 ** 18;\\n\\n    /**\\n     * @dev Getter function since constants can't be read directly from libraries.\\n     */\\n    function preciseUnit() internal pure returns (uint256) {\\n        return PRECISE_UNIT;\\n    }\\n\\n    function preciseDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * PRECISE_UNIT / b;\\n    }\\n}\\n\",\"keccak256\":\"0x554206651eb92a7a9fa151fd5b0d5ab157787326641a5caa4031840804ae4da2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002743380380620027438339818101604052810190620000379190620002ec565b620000576200004b620000b960201b60201c565b620000c160201b60201c565b81600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060039080519060200190620000b092919062000185565b50505062000462565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b82805482825590600052602060002090810192821562000201579160200282015b82811115620002005782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190620001a6565b5b50905062000210919062000214565b5090565b5b808211156200022f57600081600090555060010162000215565b5090565b60006200024a62000244846200036f565b62000346565b905080838252602082019050828560208602820111156200026a57600080fd5b60005b858110156200029e5781620002838882620002a8565b8452602084019350602083019250506001810190506200026d565b5050509392505050565b600081519050620002b98162000448565b92915050565b600082601f830112620002d157600080fd5b8151620002e384826020860162000233565b91505092915050565b600080604083850312156200030057600080fd5b60006200031085828601620002a8565b925050602083015167ffffffffffffffff8111156200032e57600080fd5b6200033c85828601620002bf565b9150509250929050565b60006200035262000365565b9050620003608282620003d2565b919050565b6000604051905090565b600067ffffffffffffffff8211156200038d576200038c62000408565b5b602082029050602081019050919050565b6000620003ab82620003b2565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b620003dd8262000437565b810181811067ffffffffffffffff82111715620003ff57620003fe62000408565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b62000453816200039e565b81146200045f57600080fd5b50565b6122d180620004726000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806364a63efd1161008c578063a128c75a11610066578063a128c75a146101ea578063ac41865a14610206578063b82e16e314610236578063f2fde38b14610254576100cf565b806364a63efd146101a6578063715018a6146101c25780638da5cb5b146101cc576100cf565b80631f312404146100d457806334283354146101045780634ef501ac14610122578063585cd34b1461015257806360d54d411461016e57806361d5b1441461018a575b600080fd5b6100ee60048036038101906100e99190611820565b610270565b6040516100fb9190611c45565b60405180910390f35b61010c610295565b6040516101199190611adf565b60405180910390f35b61013c600480360381019061013791906118fb565b6102bb565b6040516101499190611adf565b60405180910390f35b61016c600480360381019061016791906117f7565b6102fa565b005b610188600480360381019061018391906117f7565b610537565b005b6101a4600480360381019061019f91906117f7565b610729565b005b6101c060048036038101906101bb919061185c565b610820565b005b6101ca61099d565b005b6101d4610a25565b6040516101e19190611adf565b60405180910390f35b61020460048036038101906101ff9190611820565b610a4e565b005b610220600480360381019061021b9190611820565b610c67565b60405161022d9190611c45565b60405180910390f35b61023e610cf5565b60405161024b9190611b23565b60405180910390f35b61026e600480360381019061026991906117f7565b610d83565b005b6001602052816000526040600020602052806000526040600020600091509150505481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600381815481106102cb57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610302610e7b565b73ffffffffffffffffffffffffffffffffffffffff16610320610a25565b73ffffffffffffffffffffffffffffffffffffffff1614610376576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036d90611c05565b60405180910390fd5b61040f8160038054806020026020016040519081016040528092919081815260200182805480156103fc57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116103b2575b5050505050610e8390919063ffffffff16565b61044e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044590611ba5565b60405180910390fd5b6104e78160038054806020026020016040519081016040528092919081815260200182805480156104d457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161048a575b5050505050610e9d90919063ffffffff16565b600390805190602001906104fc9291906116e7565b507fdf980d21d8c7bb34800e668dbe003299093bac8e693614151d3c57f73f98a93d8160405161052c9190611adf565b60405180910390a150565b61053f610e7b565b73ffffffffffffffffffffffffffffffffffffffff1661055d610a25565b73ffffffffffffffffffffffffffffffffffffffff16146105b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105aa90611c05565b60405180910390fd5b61064c81600380548060200260200160405190810160405280929190818152602001828054801561063957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116105ef575b5050505050610e8390919063ffffffff16565b1561068c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068390611be5565b60405180910390fd5b6003819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fcf9c2c7f9adbb156bd76affb04df84595f8f5e69cab2e61221b05b05a902fa268160405161071e9190611adf565b60405180910390a150565b610731610e7b565b73ffffffffffffffffffffffffffffffffffffffff1661074f610a25565b73ffffffffffffffffffffffffffffffffffffffff16146107a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079c90611c05565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f748818fcd84486bc2804c035b8dec2300489b070a39a4a290d8311cd9791d867816040516108159190611adf565b60405180910390a150565b610828610e7b565b73ffffffffffffffffffffffffffffffffffffffff16610846610a25565b73ffffffffffffffffffffffffffffffffffffffff161461089c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089390611c05565b60405180910390fd5b6108b28282600a6108ad9190611d84565b610f0b565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fdc4665696e7cd7f9413c182d8caf55ccc693aa97c8e44e3256c5d7d1d382809b8460405161098f9190611c45565b60405180910390a350505050565b6109a5610e7b565b73ffffffffffffffffffffffffffffffffffffffff166109c3610a25565b73ffffffffffffffffffffffffffffffffffffffff1614610a19576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1090611c05565b60405180910390fd5b610a236000610f34565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610a56610e7b565b73ffffffffffffffffffffffffffffffffffffffff16610a74610a25565b73ffffffffffffffffffffffffffffffffffffffff1614610aca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac190611c05565b60405180910390fd5b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411610b89576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8090611c25565b60405180910390fd5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600090558073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f9ad7bfe54fb2f187d455f257b48cbad290f007b825a68bc9f64aab1d6dbcd02060405160405180910390a35050565b6000806000610c768585610ff8565b9150915081610c9257610c898585611154565b80925081935050505b81610caa57610ca18585611201565b80925081935050505b81610cea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ce190611bc5565b60405180910390fd5b809250505092915050565b60606003805480602002602001604051908101604052809291908181526020018280548015610d7957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610d2f575b5050505050905090565b610d8b610e7b565b73ffffffffffffffffffffffffffffffffffffffff16610da9610a25565b73ffffffffffffffffffffffffffffffffffffffff1614610dff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610df690611c05565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610e6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6690611b85565b60405180910390fd5b610e7881610f34565b50565b600033905090565b600080610e908484611342565b9150508091505092915050565b6060600080610eac8585611342565b9150915080610ef0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee790611b45565b60405180910390fd5b6000610efc86846113fc565b50905080935050505092915050565b600081670de0b6b3a764000084610f229190611ea2565b610f2c9190611d00565b905092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000806000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081111561109257600181925092505061114d565b6000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008111156111435760016111388261112a6116d7565b610f0b90919063ffffffff16565b93509350505061114d565b6000809350935050505b9250929050565b60008060008061118686600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610ff8565b915091506000806111b987600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610ff8565b915091508380156111c75750815b156111ee5760016111e18285610f0b90919063ffffffff16565b95509550505050506111fa565b60008095509550505050505b9250929050565b60008060005b6003805490508110156113325760008060038381548110611251577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ac41865a88886040518363ffffffff1660e01b81526004016112b6929190611afa565b604080518083038186803b1580156112cd57600080fd5b505afa1580156112e1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130591906118bf565b91509150811561131d5781819450945050505061133b565b5050808061132a90611f85565b915050611207565b50600080915091505b9250929050565b60008060008451905060005b818110156113eb578473ffffffffffffffffffffffffffffffffffffffff168682815181106113a6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614156113d8578060019350935050506113f5565b80806113e390611f85565b91505061134e565b5060008092509250505b9250929050565b60606000808451905084518410611448576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161143f90611b65565b60405180910390fd5b60006001826114579190611efc565b67ffffffffffffffff811115611496577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156114c45781602001602082028036833780820191505090505b50905060005b858110156115995786818151811061150b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015182828151811061154c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050808061159190611f85565b9150506114ca565b5060006001866115a99190611caa565b90505b82811015611687578681815181106115ed577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151826001836116039190611efc565b8151811061163a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050808061167f90611f85565b9150506115ac565b50808686815181106116c2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519350935050509250929050565b6000670de0b6b3a7640000905090565b828054828255906000526020600020908101928215611760579160200282015b8281111561175f5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190611707565b5b50905061176d9190611771565b5090565b5b8082111561178a576000816000905550600101611772565b5090565b60008135905061179d8161223f565b92915050565b6000815190506117b281612256565b92915050565b6000813590506117c78161226d565b92915050565b6000815190506117dc8161226d565b92915050565b6000813590506117f181612284565b92915050565b60006020828403121561180957600080fd5b60006118178482850161178e565b91505092915050565b6000806040838503121561183357600080fd5b60006118418582860161178e565b92505060206118528582860161178e565b9150509250929050565b6000806000806080858703121561187257600080fd5b60006118808782880161178e565b94505060206118918782880161178e565b93505060406118a2878288016117b8565b92505060606118b3878288016117e2565b91505092959194509250565b600080604083850312156118d257600080fd5b60006118e0858286016117a3565b92505060206118f1858286016117cd565b9150509250929050565b60006020828403121561190d57600080fd5b600061191b848285016117b8565b91505092915050565b6000611930838361193c565b60208301905092915050565b61194581611f30565b82525050565b61195481611f30565b82525050565b600061196582611c70565b61196f8185611c88565b935061197a83611c60565b8060005b838110156119ab5781516119928882611924565b975061199d83611c7b565b92505060018101905061197e565b5085935050505092915050565b60006119c5601583611c99565b91506119d082612039565b602082019050919050565b60006119e8601883611c99565b91506119f382612062565b602082019050919050565b6000611a0b602683611c99565b9150611a168261208b565b604082019050919050565b6000611a2e603283611c99565b9150611a39826120da565b604082019050919050565b6000611a51602683611c99565b9150611a5c82612129565b604082019050919050565b6000611a74602f83611c99565b9150611a7f82612178565b604082019050919050565b6000611a97602083611c99565b9150611aa2826121c7565b602082019050919050565b6000611aba602d83611c99565b9150611ac5826121f0565b604082019050919050565b611ad981611f6e565b82525050565b6000602082019050611af4600083018461194b565b92915050565b6000604082019050611b0f600083018561194b565b611b1c602083018461194b565b9392505050565b60006020820190508181036000830152611b3d818461195a565b905092915050565b60006020820190508181036000830152611b5e816119b8565b9050919050565b60006020820190508181036000830152611b7e816119db565b9050919050565b60006020820190508181036000830152611b9e816119fe565b9050919050565b60006020820190508181036000830152611bbe81611a21565b9050919050565b60006020820190508181036000830152611bde81611a44565b9050919050565b60006020820190508181036000830152611bfe81611a67565b9050919050565b60006020820190508181036000830152611c1e81611a8a565b9050919050565b60006020820190508181036000830152611c3e81611aad565b9050919050565b6000602082019050611c5a6000830184611ad0565b92915050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b6000611cb582611f6e565b9150611cc083611f6e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611cf557611cf4611fce565b5b828201905092915050565b6000611d0b82611f6e565b9150611d1683611f6e565b925082611d2657611d25611ffd565b5b828204905092915050565b6000808291508390505b6001851115611d7b57808604811115611d5757611d56611fce565b5b6001851615611d665780820291505b8081029050611d748561202c565b9450611d3b565b94509492505050565b6000611d8f82611f6e565b9150611d9a83611f78565b9250611dc77fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484611dcf565b905092915050565b600082611ddf5760019050611e9b565b81611ded5760009050611e9b565b8160018114611e035760028114611e0d57611e3c565b6001915050611e9b565b60ff841115611e1f57611e1e611fce565b5b8360020a915084821115611e3657611e35611fce565b5b50611e9b565b5060208310610133831016604e8410600b8410161715611e715782820a905083811115611e6c57611e6b611fce565b5b611e9b565b611e7e8484846001611d31565b92509050818404811115611e9557611e94611fce565b5b81810290505b9392505050565b6000611ead82611f6e565b9150611eb883611f6e565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611ef157611ef0611fce565b5b828202905092915050565b6000611f0782611f6e565b9150611f1283611f6e565b925082821015611f2557611f24611fce565b5b828203905092915050565b6000611f3b82611f4e565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000611f9082611f6e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611fc357611fc2611fce565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60008160011c9050919050565b7f41646472657373206e6f7420696e2061727261792e0000000000000000000000600082015250565b7f496e646578206d757374206265203c2041206c656e6774680000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f50726963654f7261636c652e72656d6f7665416461707465723a20416461707460008201527f657220646f6573206e6f742065786973742e0000000000000000000000000000602082015250565b7f50726963654f7261636c652e67657450726963653a205072696365206e6f742060008201527f666f756e642e0000000000000000000000000000000000000000000000000000602082015250565b7f50726963654f7261636c652e616464416461707465723a20416461707465722060008201527f616c7265616479206578697374732e0000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f50726963654f7261636c652e72656d6f766550726963653a205072696365206460008201527f6f65736e27742065786973742e00000000000000000000000000000000000000602082015250565b61224881611f30565b811461225357600080fd5b50565b61225f81611f42565b811461226a57600080fd5b50565b61227681611f6e565b811461228157600080fd5b50565b61228d81611f78565b811461229857600080fd5b5056fea264697066735822122029ea1d63474b31b2e7afae319d63f2292de8be51d2b4f4d84f27f2828c89feb664736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100cf5760003560e01c806364a63efd1161008c578063a128c75a11610066578063a128c75a146101ea578063ac41865a14610206578063b82e16e314610236578063f2fde38b14610254576100cf565b806364a63efd146101a6578063715018a6146101c25780638da5cb5b146101cc576100cf565b80631f312404146100d457806334283354146101045780634ef501ac14610122578063585cd34b1461015257806360d54d411461016e57806361d5b1441461018a575b600080fd5b6100ee60048036038101906100e99190611820565b610270565b6040516100fb9190611c45565b60405180910390f35b61010c610295565b6040516101199190611adf565b60405180910390f35b61013c600480360381019061013791906118fb565b6102bb565b6040516101499190611adf565b60405180910390f35b61016c600480360381019061016791906117f7565b6102fa565b005b610188600480360381019061018391906117f7565b610537565b005b6101a4600480360381019061019f91906117f7565b610729565b005b6101c060048036038101906101bb919061185c565b610820565b005b6101ca61099d565b005b6101d4610a25565b6040516101e19190611adf565b60405180910390f35b61020460048036038101906101ff9190611820565b610a4e565b005b610220600480360381019061021b9190611820565b610c67565b60405161022d9190611c45565b60405180910390f35b61023e610cf5565b60405161024b9190611b23565b60405180910390f35b61026e600480360381019061026991906117f7565b610d83565b005b6001602052816000526040600020602052806000526040600020600091509150505481565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600381815481106102cb57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610302610e7b565b73ffffffffffffffffffffffffffffffffffffffff16610320610a25565b73ffffffffffffffffffffffffffffffffffffffff1614610376576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161036d90611c05565b60405180910390fd5b61040f8160038054806020026020016040519081016040528092919081815260200182805480156103fc57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116103b2575b5050505050610e8390919063ffffffff16565b61044e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161044590611ba5565b60405180910390fd5b6104e78160038054806020026020016040519081016040528092919081815260200182805480156104d457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161048a575b5050505050610e9d90919063ffffffff16565b600390805190602001906104fc9291906116e7565b507fdf980d21d8c7bb34800e668dbe003299093bac8e693614151d3c57f73f98a93d8160405161052c9190611adf565b60405180910390a150565b61053f610e7b565b73ffffffffffffffffffffffffffffffffffffffff1661055d610a25565b73ffffffffffffffffffffffffffffffffffffffff16146105b3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105aa90611c05565b60405180910390fd5b61064c81600380548060200260200160405190810160405280929190818152602001828054801561063957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116105ef575b5050505050610e8390919063ffffffff16565b1561068c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068390611be5565b60405180910390fd5b6003819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fcf9c2c7f9adbb156bd76affb04df84595f8f5e69cab2e61221b05b05a902fa268160405161071e9190611adf565b60405180910390a150565b610731610e7b565b73ffffffffffffffffffffffffffffffffffffffff1661074f610a25565b73ffffffffffffffffffffffffffffffffffffffff16146107a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079c90611c05565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f748818fcd84486bc2804c035b8dec2300489b070a39a4a290d8311cd9791d867816040516108159190611adf565b60405180910390a150565b610828610e7b565b73ffffffffffffffffffffffffffffffffffffffff16610846610a25565b73ffffffffffffffffffffffffffffffffffffffff161461089c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089390611c05565b60405180910390fd5b6108b28282600a6108ad9190611d84565b610f0b565b600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fdc4665696e7cd7f9413c182d8caf55ccc693aa97c8e44e3256c5d7d1d382809b8460405161098f9190611c45565b60405180910390a350505050565b6109a5610e7b565b73ffffffffffffffffffffffffffffffffffffffff166109c3610a25565b73ffffffffffffffffffffffffffffffffffffffff1614610a19576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a1090611c05565b60405180910390fd5b610a236000610f34565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610a56610e7b565b73ffffffffffffffffffffffffffffffffffffffff16610a74610a25565b73ffffffffffffffffffffffffffffffffffffffff1614610aca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac190611c05565b60405180910390fd5b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205411610b89576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b8090611c25565b60405180910390fd5b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600090558073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167f9ad7bfe54fb2f187d455f257b48cbad290f007b825a68bc9f64aab1d6dbcd02060405160405180910390a35050565b6000806000610c768585610ff8565b9150915081610c9257610c898585611154565b80925081935050505b81610caa57610ca18585611201565b80925081935050505b81610cea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ce190611bc5565b60405180910390fd5b809250505092915050565b60606003805480602002602001604051908101604052809291908181526020018280548015610d7957602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610d2f575b5050505050905090565b610d8b610e7b565b73ffffffffffffffffffffffffffffffffffffffff16610da9610a25565b73ffffffffffffffffffffffffffffffffffffffff1614610dff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610df690611c05565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610e6f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e6690611b85565b60405180910390fd5b610e7881610f34565b50565b600033905090565b600080610e908484611342565b9150508091505092915050565b6060600080610eac8585611342565b9150915080610ef0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ee790611b45565b60405180910390fd5b6000610efc86846113fc565b50905080935050505092915050565b600081670de0b6b3a764000084610f229190611ea2565b610f2c9190611d00565b905092915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000806000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600081111561109257600181925092505061114d565b6000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008111156111435760016111388261112a6116d7565b610f0b90919063ffffffff16565b93509350505061114d565b6000809350935050505b9250929050565b60008060008061118686600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610ff8565b915091506000806111b987600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16610ff8565b915091508380156111c75750815b156111ee5760016111e18285610f0b90919063ffffffff16565b95509550505050506111fa565b60008095509550505050505b9250929050565b60008060005b6003805490508110156113325760008060038381548110611251577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ac41865a88886040518363ffffffff1660e01b81526004016112b6929190611afa565b604080518083038186803b1580156112cd57600080fd5b505afa1580156112e1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130591906118bf565b91509150811561131d5781819450945050505061133b565b5050808061132a90611f85565b915050611207565b50600080915091505b9250929050565b60008060008451905060005b818110156113eb578473ffffffffffffffffffffffffffffffffffffffff168682815181106113a6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1614156113d8578060019350935050506113f5565b80806113e390611f85565b91505061134e565b5060008092509250505b9250929050565b60606000808451905084518410611448576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161143f90611b65565b60405180910390fd5b60006001826114579190611efc565b67ffffffffffffffff811115611496577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156114c45781602001602082028036833780820191505090505b50905060005b858110156115995786818151811061150b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015182828151811061154c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050808061159190611f85565b9150506114ca565b5060006001866115a99190611caa565b90505b82811015611687578681815181106115ed577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151826001836116039190611efc565b8151811061163a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050808061167f90611f85565b9150506115ac565b50808686815181106116c2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519350935050509250929050565b6000670de0b6b3a7640000905090565b828054828255906000526020600020908101928215611760579160200282015b8281111561175f5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190611707565b5b50905061176d9190611771565b5090565b5b8082111561178a576000816000905550600101611772565b5090565b60008135905061179d8161223f565b92915050565b6000815190506117b281612256565b92915050565b6000813590506117c78161226d565b92915050565b6000815190506117dc8161226d565b92915050565b6000813590506117f181612284565b92915050565b60006020828403121561180957600080fd5b60006118178482850161178e565b91505092915050565b6000806040838503121561183357600080fd5b60006118418582860161178e565b92505060206118528582860161178e565b9150509250929050565b6000806000806080858703121561187257600080fd5b60006118808782880161178e565b94505060206118918782880161178e565b93505060406118a2878288016117b8565b92505060606118b3878288016117e2565b91505092959194509250565b600080604083850312156118d257600080fd5b60006118e0858286016117a3565b92505060206118f1858286016117cd565b9150509250929050565b60006020828403121561190d57600080fd5b600061191b848285016117b8565b91505092915050565b6000611930838361193c565b60208301905092915050565b61194581611f30565b82525050565b61195481611f30565b82525050565b600061196582611c70565b61196f8185611c88565b935061197a83611c60565b8060005b838110156119ab5781516119928882611924565b975061199d83611c7b565b92505060018101905061197e565b5085935050505092915050565b60006119c5601583611c99565b91506119d082612039565b602082019050919050565b60006119e8601883611c99565b91506119f382612062565b602082019050919050565b6000611a0b602683611c99565b9150611a168261208b565b604082019050919050565b6000611a2e603283611c99565b9150611a39826120da565b604082019050919050565b6000611a51602683611c99565b9150611a5c82612129565b604082019050919050565b6000611a74602f83611c99565b9150611a7f82612178565b604082019050919050565b6000611a97602083611c99565b9150611aa2826121c7565b602082019050919050565b6000611aba602d83611c99565b9150611ac5826121f0565b604082019050919050565b611ad981611f6e565b82525050565b6000602082019050611af4600083018461194b565b92915050565b6000604082019050611b0f600083018561194b565b611b1c602083018461194b565b9392505050565b60006020820190508181036000830152611b3d818461195a565b905092915050565b60006020820190508181036000830152611b5e816119b8565b9050919050565b60006020820190508181036000830152611b7e816119db565b9050919050565b60006020820190508181036000830152611b9e816119fe565b9050919050565b60006020820190508181036000830152611bbe81611a21565b9050919050565b60006020820190508181036000830152611bde81611a44565b9050919050565b60006020820190508181036000830152611bfe81611a67565b9050919050565b60006020820190508181036000830152611c1e81611a8a565b9050919050565b60006020820190508181036000830152611c3e81611aad565b9050919050565b6000602082019050611c5a6000830184611ad0565b92915050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b6000611cb582611f6e565b9150611cc083611f6e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611cf557611cf4611fce565b5b828201905092915050565b6000611d0b82611f6e565b9150611d1683611f6e565b925082611d2657611d25611ffd565b5b828204905092915050565b6000808291508390505b6001851115611d7b57808604811115611d5757611d56611fce565b5b6001851615611d665780820291505b8081029050611d748561202c565b9450611d3b565b94509492505050565b6000611d8f82611f6e565b9150611d9a83611f78565b9250611dc77fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8484611dcf565b905092915050565b600082611ddf5760019050611e9b565b81611ded5760009050611e9b565b8160018114611e035760028114611e0d57611e3c565b6001915050611e9b565b60ff841115611e1f57611e1e611fce565b5b8360020a915084821115611e3657611e35611fce565b5b50611e9b565b5060208310610133831016604e8410600b8410161715611e715782820a905083811115611e6c57611e6b611fce565b5b611e9b565b611e7e8484846001611d31565b92509050818404811115611e9557611e94611fce565b5b81810290505b9392505050565b6000611ead82611f6e565b9150611eb883611f6e565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611ef157611ef0611fce565b5b828202905092915050565b6000611f0782611f6e565b9150611f1283611f6e565b925082821015611f2557611f24611fce565b5b828203905092915050565b6000611f3b82611f4e565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000611f9082611f6e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611fc357611fc2611fce565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60008160011c9050919050565b7f41646472657373206e6f7420696e2061727261792e0000000000000000000000600082015250565b7f496e646578206d757374206265203c2041206c656e6774680000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f50726963654f7261636c652e72656d6f7665416461707465723a20416461707460008201527f657220646f6573206e6f742065786973742e0000000000000000000000000000602082015250565b7f50726963654f7261636c652e67657450726963653a205072696365206e6f742060008201527f666f756e642e0000000000000000000000000000000000000000000000000000602082015250565b7f50726963654f7261636c652e616464416461707465723a20416461707465722060008201527f616c7265616479206578697374732e0000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f50726963654f7261636c652e72656d6f766550726963653a205072696365206460008201527f6f65736e27742065786973742e00000000000000000000000000000000000000602082015250565b61224881611f30565b811461225357600080fd5b50565b61225f81611f42565b811461226a57600080fd5b50565b61227681611f6e565b811461228157600080fd5b50565b61228d81611f78565b811461229857600080fd5b5056fea264697066735822122029ea1d63474b31b2e7afae319d63f2292de8be51d2b4f4d84f27f2828c89feb664736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addAdapter(address)": {
        "params": {
          "_adapter": "Address of new adapter"
        }
      },
      "constructor": {
        "params": {
          "_adapters": "List of adapters used to price assets created by other protocols",
          "_masterQuoteAsset": "Address of asset that can be used to link unrelated asset pairs"
        }
      },
      "editMasterQuoteAsset(address)": {
        "params": {
          "_newMasterQuoteAsset": "New address of master quote asset"
        }
      },
      "feedPrice(address,address,uint256,uint8)": {
        "params": {
          "_assetOne": "Address of first asset in pair",
          "_assetTwo": "Address of second asset in pair",
          "_decimals": "Price decimals",
          "_price": "Price of assetOne per assetTwo"
        }
      },
      "getPrice(address,address)": {
        "params": {
          "_assetOne": "Address of first asset in pair",
          "_assetTwo": "Address of second asset in pair"
        },
        "returns": {
          "_0": "Price of asset pair to 18 decimals of precision"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeAdapter(address)": {
        "params": {
          "_adapter": "Address of adapter to remove"
        }
      },
      "removePrice(address,address)": {
        "params": {
          "_assetOne": "Address of first asset in pair",
          "_assetTwo": "Address of second asset in pair"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "PriceOracle Contract that returns the price for any given asset pair. Price is retrieved either directly from an oracle, calculated using common asset pairs, or uses external data to calculate price. Note: Prices are returned in preciseUnits (i.e. 18 decimals of precision)",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addAdapter(address)": {
        "notice": "GOVERNANCE FUNCTION: Add new oracle adapter."
      },
      "constructor": {
        "notice": "Initialize state variables"
      },
      "editMasterQuoteAsset(address)": {
        "notice": "GOVERNANCE FUNCTION: Change the master quote asset."
      },
      "feedPrice(address,address,uint256,uint8)": {
        "notice": "GOVERNANCE FUNCTION: Add new asset pair price."
      },
      "getAdapters()": {
        "notice": "Returns an array of adapters"
      },
      "getPrice(address,address)": {
        "notice": "SYSTEM-ONLY PRIVELEGE: Find price of passed asset pair, if possible. The steps it takes are:  1) Check to see if a direct or inverse price of the pair exists,  2) If not, use masterQuoteAsset to link pairs together (i.e. BTC/ETH and ETH/USDC     could be used to calculate BTC/USDC).  3) If not, check oracle adapters in case one or more of the assets needs external protocol data     to price.  4) If all steps fail, revert."
      },
      "removeAdapter(address)": {
        "notice": "GOVERNANCE FUNCTION: Remove oracle adapter."
      },
      "removePrice(address,address)": {
        "notice": "GOVERNANCE FUNCTION: Remove asset pair's price."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/PriceOracle.sol:PriceOracle",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 179,
        "contract": "contracts/PriceOracle.sol:PriceOracle",
        "label": "prices",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 181,
        "contract": "contracts/PriceOracle.sol:PriceOracle",
        "label": "masterQuoteAsset",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 184,
        "contract": "contracts/PriceOracle.sol:PriceOracle",
        "label": "adapters",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}